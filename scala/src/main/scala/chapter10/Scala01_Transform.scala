package chapter10

object Scala01_Transform {


  def main(args: Array[String]): Unit = {

    // TODO OCP => Open Close 开闭开发原则
    //  如果当前的程序出现了错误，希望编译器可以通过自动化的手段自动解决，而不需要
    //  改动任何代码，遵循OCP开发原则
    //  编译器提供了一种隐式转换功能，帮助我们是想类型的转换
    //  Byte和Int类型之间没有任何的关系，但是编译器可以进行自动的转换（隐式转换），将Byte类型转换为Int类型


    // TODO 现在的错误 Double => Int，编译器无法实现自动转换操作
    //  之所以出现错误，是编译器自动转换规则中没有Double => Int
    //  如果没有，可以自定义添加转换规则，让编译器识别后自动使用即可。


    // TODO 让编译器识别自定义的转换规则，需要添加特殊的关键字
    //  所谓的隐式转换也叫做二次编译
    //  第一次编译出现错误
    //  编译器尝试在自己的编译规则查找能够让编译通过的规则
    //  如果找到，那么会自动进行转换指定第二次编译
    //  如果找不到，那么编译会出现错误
    //  隐式转换的时机就是编译出现错误的地方

    // TODO 所谓的隐式转换就是类型转换，而且这个转换是有编译器完成的
    implicit def transform(d: Double): Int = {
      (d * 100).toInt
    }

    //    new TestScala

  }
}
